/*!
 * I18n4e
 * (c) 2024 Pedro Luis Dias
 * Released under the MIT License.
 * https://github.com/luiisp/i18n4e
 */
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const config_1 = require("../client/config");
const utils_1 = require("../client/utils");
const i18n4e = {
    userLang: localStorage.getItem(config_1.localStorageLangKey) || navigator.language,
    getLangs: () => __awaiter(void 0, void 0, void 0, function* () {
        try {
            const res = yield fetch(config_1.routesNames.getLangs);
            const data = yield res.json();
            return data;
        }
        catch (err) {
            return console.error(err);
        }
    }),
    setLang: (lang) => __awaiter(void 0, void 0, void 0, function* () {
        localStorage.setItem(config_1.localStorageLangKey, lang);
        return yield (0, utils_1.syncWithServer)("setLang", { lang });
    }),
    unsetLang: () => __awaiter(void 0, void 0, void 0, function* () {
        localStorage.removeItem(config_1.localStorageLangKey);
        return yield (0, utils_1.syncWithServer)("unsetLang", {});
    })
};
