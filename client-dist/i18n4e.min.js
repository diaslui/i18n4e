



const i18n4e =  {
	init:({
		files = [],
		host = window.location.origin,
		path = '/i18n4e/i/translations',
		removeTagAfterTranslation = true,
		changeDocumentLangBeforeRequest = true,
	} = {}) => {
		const userLang = navigator.language || navigator.userLanguage;
	
		if (!userLang) {
			console.error('i18n4e client: No language detected');
			return;
		}
	
		if (changeDocumentLangBeforeRequest) {
			document.documentElement.lang = userLang;
		}
	
		const replaceElementsforTranslations = (obj) => {
			for (let key in obj) {
				const element = document.querySelector(`[i18nID="${key}"]`);
				if (element) {
					element.innerHTML = obj[key];
					if (removeTagAfterTranslation) {
						element.removeAttribute('i18nID');
					}
				}
			}
			return true;
		};
	
		const getTranslations = (lang) => {
			const url = `${host}${path}?lang=${lang.toLowerCase().replace('-', '_')}&files=${files.join('+')}`;
			if (!url) {
				console.error(`i18n4e client: Error fetching translations. Verify the path and Host`);
				return;
			}
			return fetch(url)
				.then((response) => response.json())
				.then((data) => {
					replaceElementsforTranslations(data);
				})
				.catch((error) => {
					console.error(
						`i18n4e client: Error fetching translations. Verify the path and Host`
					);
				});
		};
	
		getTranslations(userLang).then(() => {
			document.documentElement.lang = navigator.language;
		});
	},
	availableLangs: () => {
		return fetch('/i18n4e/i/languages')
			.then((response) => response.json())
			.then((data) => {
				return data;
			})
			.catch((error) => {
				console.error(
					`i18n4e client: Error fetching available languages. Verify the path and Host`
				);
			});
	}
	


}